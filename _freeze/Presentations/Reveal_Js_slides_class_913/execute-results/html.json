{
  "hash": "c06f4c0f42326baba53590dcfba9536f",
  "result": {
    "markdown": "---\ntitle: \"Dataframes in Tidyverse\"\nformat: revealjs\neditor: visual\nauthor: \"Theresia Bennett\"\n---\n\n\n## \n\nPracticing Tidyverse Skills\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidybiology)\n#each of these sets has one variable in common - ladder score - so they can be combined!\n\nglimpse(happy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5\nColumns: 4\n$ country_name   <chr> \"Iraq\", \"Comoros\", \"Panama\", \"Maldives\", \"Spain\"\n$ ladder_score   <dbl> 4.854, 4.289, 6.180, 5.198, 6.491\n$ gdp            <dbl> 9.240, 8.031, 10.350, 9.826, 10.571\n$ social_support <dbl> 0.746, 0.626, 0.896, 0.913, 0.932\n```\n:::\n\n```{.r .cell-code}\nglimpse(happy_join_one)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5\nColumns: 2\n$ country_name            <chr> \"Iraq\", \"Comoros\", \"Panama\", \"Maldives\", \"Spai…\n$ healthy_life_expectancy <dbl> 60.583, 57.349, 69.652, 70.600, 74.700\n```\n:::\n\n```{.r .cell-code}\nglimpse(happy_full)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 149\nColumns: 20\n$ country_name                              <chr> \"Finland\", \"Denmark\", \"Switz…\n$ region                                    <chr> \"Western Europe\", \"Western E…\n$ ladder_score                              <dbl> 7.842, 7.620, 7.571, 7.554, …\n$ standard_error_of_ladder_score            <dbl> 0.032, 0.035, 0.036, 0.059, …\n$ upperwhisker                              <dbl> 7.904, 7.687, 7.643, 7.670, …\n$ lowerwhisker                              <dbl> 7.780, 7.552, 7.500, 7.438, …\n$ logged_gdp_per_capita                     <dbl> 10.775, 10.933, 11.117, 10.8…\n$ social_support                            <dbl> 0.954, 0.954, 0.942, 0.983, …\n$ healthy_life_expectancy                   <dbl> 72.000, 72.700, 74.400, 73.0…\n$ freedom_to_make_life_choices              <dbl> 0.949, 0.946, 0.919, 0.955, …\n$ generosity                                <dbl> -0.098, 0.030, 0.025, 0.160,…\n$ perceptions_of_corruption                 <dbl> 0.186, 0.179, 0.292, 0.673, …\n$ ladder_score_in_dystopia                  <dbl> 2.43, 2.43, 2.43, 2.43, 2.43…\n$ explained_by_log_gdp_per_capita           <dbl> 1.446, 1.502, 1.566, 1.482, …\n$ explained_by_social_support               <dbl> 1.106, 1.108, 1.079, 1.172, …\n$ explained_by_healthy_life_expectancy      <dbl> 0.741, 0.763, 0.816, 0.772, …\n$ explained_by_freedom_to_make_life_choices <dbl> 0.691, 0.686, 0.653, 0.698, …\n$ explained_by_generosity                   <dbl> 0.124, 0.208, 0.204, 0.293, …\n$ explained_by_perceptions_of_corruption    <dbl> 0.481, 0.485, 0.413, 0.170, …\n$ dystopia_residual                         <dbl> 3.253, 2.868, 2.839, 2.967, …\n```\n:::\n:::\n\n\n## \n\nBinding Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#in order to bind columns, we must see if the fuctions have the same number of rows (they do)\nnrow(happy) == nrow(happy_join_one)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nbind_cols(happy, happy_join_one)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 6\n  country_name...1 ladder_score   gdp social_support country_name...5\n  <chr>                   <dbl> <dbl>          <dbl> <chr>           \n1 Iraq                     4.85  9.24          0.746 Iraq            \n2 Comoros                  4.29  8.03          0.626 Comoros         \n3 Panama                   6.18 10.4           0.896 Panama          \n4 Maldives                 5.20  9.83          0.913 Maldives        \n5 Spain                    6.49 10.6           0.932 Spain           \n# ℹ 1 more variable: healthy_life_expectancy <dbl>\n```\n:::\n:::\n\n\n## \n\nFiltering\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#filter out all countries from 'happy_full' that are also in 'happy'\n#use the filtering join function (in this case, the anti-joint function gives us the right answer)\nhappy_full %>%\n  anti_join(happy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 144 × 20\n   country_name region          ladder_score standard_error_of_la…¹ upperwhisker\n   <chr>        <chr>                  <dbl>                  <dbl>        <dbl>\n 1 Finland      Western Europe          7.84                  0.032         7.90\n 2 Denmark      Western Europe          7.62                  0.035         7.69\n 3 Switzerland  Western Europe          7.57                  0.036         7.64\n 4 Iceland      Western Europe          7.55                  0.059         7.67\n 5 Netherlands  Western Europe          7.46                  0.027         7.52\n 6 Norway       Western Europe          7.39                  0.035         7.46\n 7 Sweden       Western Europe          7.36                  0.036         7.43\n 8 Luxembourg   Western Europe          7.32                  0.037         7.40\n 9 New Zealand  North America …         7.28                  0.04          7.36\n10 Austria      Western Europe          7.27                  0.036         7.34\n# ℹ 134 more rows\n# ℹ abbreviated name: ¹​standard_error_of_ladder_score\n# ℹ 15 more variables: lowerwhisker <dbl>, logged_gdp_per_capita <dbl>,\n#   social_support <dbl>, healthy_life_expectancy <dbl>,\n#   freedom_to_make_life_choices <dbl>, generosity <dbl>,\n#   perceptions_of_corruption <dbl>, ladder_score_in_dystopia <dbl>,\n#   explained_by_log_gdp_per_capita <dbl>, explained_by_social_support <dbl>, …\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}